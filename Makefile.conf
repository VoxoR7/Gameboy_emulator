# add extra message for error
# yes no
DEBUG = no

# kinda like gdb, add commands like breakpoints, print registers and value in memory ...
# yes no
STEP = no

# enable some optimisation, does not behave like a real gameboy would for some rom
# yes no
FAST = yes

# choose the target operating system
# win lin
OS = lin

# enable profiling option
# yes no
PROFILING = no

##### DO NOT TOUCH BELOW THIS #####

C_FLAGS = -std=c17 -Wall -D__REALITY
LD_FLAGS_ADDITIONAL =
STRIP = yes

# setup OS
ifeq ($(OS),win)
	C_FLAGS += -D__WIN
else ifeq ($(OS),lin)
    C_FLAGS += -D__LIN
else
    $(error OS is not correctly set (win/lin))
endif

#setup profiling
ifeq ($(PROFILING), yes)
	C_FLAGS += -pg
    LD_FLAGS_ADDITIONAL += -pg
    STRIP = no

    # if profiling, setup debug
    ifeq ($(DEBUG),yes)
        C_FLAGS += -D__DEBUG
    else ifeq ($(DEBUG),no)
    else
        $(error DEBUG is not correctly set (yes/no))
    endif

else ifeq ($(PROFILING), no)

    # if no profiling, setup debug
    ifeq ($(DEBUG),yes)
        C_FLAGS += -g -D__DEBUG
        LD_FLAGS_ADDITIONAL += -g
        STRIP = no
    else ifeq ($(DEBUG),no)
        C_FLAGS += -O3
    else
        $(error DEBUG is not correctly set (yes/no))
    endif

else
    $(error PROFILING is not correctly set (yes/no))
endif

ifeq ($(STEP), yes)
	C_FLAGS += -D__STEP
else ifeq ($(STEP), no)
else
    $(error STEP is not correctly set (yes/no))
endif

ifeq ($(FAST), yes)
	C_FLAGS += -D__FAST
else ifeq ($(FAST), no)
else
    $(error FAST is not correctly set (yes/no))
endif